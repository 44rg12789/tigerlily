#    TigerLily:  A client for the lily CMC, written in Perl.
#    Copyright (C) 1999  The TigerLily Team, <tigerlily@einstein.org>
#                                http://www.hitchhiker.org/tigerlily/
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License version 2, as published
#  by the Free Software Foundation; see the included file COPYING.
#
# $Header: /home/mjr/tmp/tlilycvs/lily/tigerlily2/README,v 1.12 2000/12/17 19:10:59 neild Exp $

     ("`-/")_.-'"``-._ 
      . . `; -._    )-;-,_`)          TigerLily 2.x
     (v_,)'  _  )`-.  ``-'             "Feel Free"
    _.- _..-_/ / ((.'
  ((,.-'   ((,/ 

===============================================================================

Installing
----------
TigerLily requires Perl 5.003 or greater.  You will also need
Curses.pm or Term::Readline::Gnu. (from CPAN)

You can run tlily directly from the source directory, by running
"perl tlily.PL".

If you run Makefile.PL with "perl Makefile.PL", you will generate a
single-file version of tlily, named "tlily.plx".  This may be installed
wherever you wish.


Colors
------

Color preferences are specified in the config files(See 'Configuration'
below).  To change a color, set that color preference in your site or
user configuration files.  Color preferences are in %color_attrs, and
monochrome preferences are in %mono_attrs.

Example:  To make the header on private messages red on white instead of
green on black, add the following to your config file:

    %color_attrs = ('public_header' => [qw(red     white   normal)]);


/-command Overrides
-------------------

Tigerlily includes several client-side fixes/enhancements for existing lily
commmands, implemented by intercepting the command before it is sent
to the server:

/info		Enhanced so that /info set and /info edit bring up your
		editor for you to change your info.

/memo		Enhanced so that /memo set and /memo edit bring up your
		editor for you to change your memos.

/blurb          Enhanced so that /blurb will squeeze your requested blurb
                into the space available.

/oops		Fixed so as to reset your sendlist correctly for ;-expansion

/also		Fixed so as to append the /also'ed people to your sendlist
		for ;-expansion.


To allow any of these overrides, put the command without the / in the
@slash variable in your site or user configuration files.

Example: To enable the /info override, add the following to your 
	 user or site config files:

@slash = ('info');

To disallow an override, put the command without the / and with a leading
'-' in the @slash variable in your site or user configuration files.

Example: To disable the /also override, add the following to your 
	 user or site config files:

@slash = ('-also');

Being concious not to override the existing behavior of lily commands, the
current default is to not override any /-commands.

There are those among the developers that want to change this default,
though, and so this default may change.


Configuration (Needs expanding)
-------------

TigerLily now has 4 levels of customization:
    Level    Default File Location
             Description
    -----    ---------------------
    Global   /usr/local/lib/tlily/tlily.cf
             Default settings for all features; please no not edit except
             when developing to add defaults for new settings.
    Site     /usr/local/etc/tlily.cf
             Site-specific settings to augment or override the global
             settings.  System Administrators wishing to change the
             default settings for their users should edit this file.
    User     ~/.lily/tlily/tlily.cf
             User-specific settings to override the global and site
             settings.
    Command  <no file>
             Many(not all) configuration options can be overridden at the
             command line.

Here is a summary of the common configuration file (CF) options:

@load
	Setting this variable in a CF will change the list of
	extensions to load.  An extension preceeded by a - will
	cause that extension to not be loaded.  
	    # Example:
	    @load = ('a', 'b', '-c', 'd', '-e');
	    # In addition to the current extension list, extensions a, b,
	    # and d will be loaded, and extensions c and e will not be loaded.
	The default extension list is in the global CF, and can be
	changed using this method in the site and/or user CFs.

%color_attrs
%mono_attrs
	Setting elements of these hashes in a cf will change the color
	settings for the color and monochrome mode of an element.

@slash
	Setting this variable will change the list of /-commands that are
	allowed to be intercepted by tlily and other extensions in order
	to add functionality to an existing command.  Any extension wanting
	to intercept a /-command must honor their desired command's
	existence/non-existence in this list.  Adding a /-command to this
	list will not necessarily enable interception of the /-command;
	the extension that wants to intercept it must be loaded also.
	    # Example:
	    @slash = ('-info', 'also', 'oops');
	    # In addition to the slash list from previous CF levels,
	    # allow /also and /oops to be intercepted, but do not
	    # allow /info to be overridden.
	By default, no slash commands will be allowed to be intercepted.  This
	can be overridden in the site and/or user CFs using this method.

$emote_oops
        If set, this specifies an oops string to use for emote discussions.
        The standard lily /oops will still be used for connect discs.  Note
        that this only effects %oops -- you will need to add oops to @slash
        to change /oops.

@prefer
        This variable contains a list of destinations to "prefer" when
        doing autoexpansion.  If a partial destination is a prefix to
        an element in this list, it will always be expanded to it.
        Examples:
          @prefer = ('-security');
          The "security" discussion exists, as does the user "Secret Agent".
          "sec" will expand to "-security".

          @prefer = ('damien_clone');
          The users "damien" and "damien clone" both exist.
          "dam" will expand to "damien_clone".  "damien" exactly matches
          a user, and will not expand.
	
%bindings
        Set %bindings to install global key bindings.  For example:
                %bindings = { 'M-g' => 'look' };
        or
                $bindings{'M-g'} = 'look';
        will both set the M-g key to do the "look" function, which
        provides a simple lookup mechanism to the Unix "words" file.
        (Note that the look function is bound to C-g by default, and
        %bindings does not change that.)  Bindings set this way will
        be available before you are even connected to the server,
        which can't be accomplished by using %bind in a Startup file/memo.

Extensions can each have options to configure them; see the documentation
for the specific module to see what options can be set.


CVS access
----------
The TigerLily sources are stored in a CVS repository.  Anyone working on
TigerLily development can get access by contacting Damien (neild@acm.rpi.edu)
or Albert (albert@acm.rpi.edu).  We also allow anonymous read-only access.

The repository is currently located on tlily.centauri.org.

To access the repository anonymous read-only, do:
  cvs -d :pserver:anon@tlily.centauri.org:/data/cvs login
  (When prompted for a password, just press enter.)
  cvs -d :pserver:anon@tlily.centauri.org:/data/cvs co tlily2

To access the repository read-write, once you have an account, you will
need to set two environment variables:
  export CVSROOT=:ext:neild@tlily.centauri.org:/data/cvs
  export CVS_RSH=ssh

Obviously, replace the `neild' with your own userid on tlily.centauri.org.

The important CVS commands are:
  - cvs checkout tlily2
    This will grab a copy of the current source tree, and place it in a
    new directory named `tlily2'.  No locking is implied by this operation;
    you may delete the checked out tree without ill effect.

All other CVS commands accept a list of files as an argument; in the absence
of this list, they operate on the current directory.

  - cvs update
    Compares a checked out tree to the current sources, merging down any
    changed files from the repository.  Changes you make will not be added
    to the repository until you do a cvs commit.

  - cvs add
    Registers a new file into the repository.  The file will be visible to
    others after you cvs commit.

  - cvs remove
    Removes a file from the repository.  The file will disappear to others
    after you cvs commit.

  - cvs commit
    Checks in all changes in the current tree.

Read the CVS documentation for more detailed information.
